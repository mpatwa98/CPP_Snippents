{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"cpp boilerplate": {
		"prefix": "cpp boilerplate code",
		"body": [
			"#include<bits/stdc++.h>",
			"using namespace std;",
			"#define ll long long",
			"#define all(x) (x).begin(), (x).end()\n",
			"int main()",
			"{",
			"\tios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n",
			"\t$1",
			"",
			"\treturn 0;",
			"}"
		],
		"description": "This is a boilerplate for cpp"
	},
	"leetcode boilerplate": {
		"prefix": "leetcode boilerplate code",
		"body": [
			"#include<bits/stdc++.h>",
			"using namespace std;\n",
			"struct TreeNode {",
			"\tint val;",
			"\tTreeNode *left;",
			"\tTreeNode *right;",
			"\tTreeNode() : val(0), left(nullptr), right(nullptr) {}",
			"\tTreeNode(int x) : val(x), left(nullptr), right(nullptr) {}",
			"\tTreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}",
			"};",
			"\nint main()",
			"{",
			"\tios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n",
			"\tSolution obj;",
			"\t$1",
			"",
			"\treturn 0;",
			"}"
		],
		"description": "This is a boilerplate for Leetcode"
	},
	"cf boilerplate": {
    "prefix": "cf boilerplate",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "#define M 1000000007",
      "#define fr first",
      "#define sc second",
      "#define pb push_back",
      "#define ppb pop_back",
      "#define pf push_front",
      "#define ppf pop_front",
      "#define mp make_pair",
      "#define ppc __builtin_popcount",
      "#define ppcll __builtin_popcountll",
      "#define all(x) (x).begin(), (x).end()",
      "typedef long long ll;",
      "typedef long double ld;",
      "typedef pair<int, int> pii;",
      "typedef vector<int> vi;",
      "",
      "void __print(int x) {cerr << x;}",
      "void __print(long x) {cerr << x;}",
      "void __print(long long x) {cerr << x;}",
      "void __print(unsigned x) {cerr << x;}",
      "void __print(unsigned long x) {cerr << x;}",
      "void __print(unsigned long long x) {cerr << x;}",
      "void __print(float x) {cerr << x;}",
      "void __print(double x) {cerr << x;}",
      "void __print(long double x) {cerr << x;}",
      "void __print(char x) {cerr << '\\'' << x << '\\'';}",
      "void __print(const char *x) {cerr << '\\'' << x << '\\'';}",
      "void __print(const string &x) {cerr << '\\'' << x << '\\'';}",
      "void __print(bool x) {cerr << (x ? \"true\" : \"false\");}",
      "template<typename T, typename V>",
      "void __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}",
      "template<typename T>",
      "void __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? \",\" : \"\"), __print(i); cerr << \"}\";}",
      "void _print() {cerr << \"]\\n\";}",
      "template <typename T, typename... V>",
      "void _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << \", \"; _print(v...);}",
      "#ifndef ONLINE_JUDGE",
      "#define debug(x...) cerr << \"[\" << #x << \"] = [\"; _print(x)",
      "#else",
      "#define debug(x...)",
      "#endif",
      "",
      "ll power(ll base, ll p) {",
      "  ll res = 1;",
      "  base = base % M;",
      "  while (p > 0) {",
      "    if (p & 1) {",
      "      res = (res * base) % M;",
      "      p--;",
      "    }",
      "    base = (base * base) % M;",
      "    p >>= 1;",
      "  }",
      "  return res;",
      "}",
      "",
      "void solve() {",
      "  // Your solution code goes here",
      "}",
      "",
      "int main() {",
      "  ios::sync_with_stdio(0);",
      "  cin.tie(0);",
      "  cout.tie(0);",
      "  mt19937 rng((unsigned int)chrono::steady_clock::now().time_since_epoch().count());",
      "  auto start = chrono::high_resolution_clock::now();",
      "  int t;",
      "  cin >> t;",
      "  for (int tc = 1; tc <= t; ++tc) {",
      "    solve();",
      "  }",
      "  auto stop = chrono::high_resolution_clock::now();",
      "  auto duration = chrono::duration_cast<chrono::microseconds>(stop - start);",
      "  cerr << duration.count() / 1000.0 << 'm' << 's';",
      "  return 0;",
      "}"
    ],
    "description": "C++ Competitive Programming Template"
  }
}
